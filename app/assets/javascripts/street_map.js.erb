//Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/

var globalMap;
var globalLayers = [];
var base_url_regions = "/assets/";
$(document).ready(function (){
    if(gon.street_map)
    {
        initialise_street_map();
    }

});

function initialise_street_map()
{
    var fromProjection  = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
    var toProjection    = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection

    globalMap = intialise_map();

    console.log(gon.relation_list);

    //Initialise styles, rules and layers
    
    //Different styles needed here 
    var style_array;
    if(gon.one_factor)
        style_array = setup_one_factor_styles();
    else
        style_array = setup_two_factor_styles();

    var borough_fill_style = style_array['borough_fill_style'];
    var ward_fill_style = style_array['ward_fill_style'];
    var ward_select_style = style_array['ward_select_style'];

    var loaded_region_data = []

    console.log(gon.feature_groups);

    //Initialise and add rules
    if(gon.one_factor)
    {
        var rule_array = setup_one_factor_rules(gon.feature_groups['boroughs'].length);
        for(i in rule_array)
        {
        	borough_fill_style.addRules([rule_array[i]]);
        }
    }
    else
    {
        var rule_array = setup_two_factor_rules(gon.feature_groups['boroughs'], gon.feature_groups['wards'], gon.relation_list);
        for(i in rule_array)
        {
            ward_fill_style.addRules([rule_array[i]]);
        }
    }

    
    //Initialise and store layer objects
    var layers = setup_layers(globalMap, borough_fill_style, ward_fill_style, ward_select_style);
    var borough_layer = layers['borough_layer'];
    globalLayers['borough_layer'] = borough_layer;

    var ward_layer = layers['ward_layer'];
    globalLayers['ward_layer'] = ward_layer;

    //Get regions asynchronously and plot on map
    $.ajax({
        url: base_url_regions + "boroughs-reduced.json",
        crossDomain: true,
        dataType: "JSON",
        cache: false
    })
    .done(function( json ) {
        loaded_region_data['boroughs'] = json['regions'];
        plot_features(globalMap, borough_layer, json['regions'], "London Boro", fromProjection, toProjection);
        insert_stats(globalMap, borough_layer, gon.feature_groups['boroughs']);
        console.log(borough_layer);
    });

    $.ajax({
        url: base_url_regions + "wards-reduced.json",
        crossDomain: true,
        dataType: "JSON",
        cache: false
    })
    .done(function( json ) {
        loaded_region_data['wards'] = json['regions'];

        plot_features(globalMap, ward_layer, json['regions'], "Ward", fromProjection, toProjection);
        
        if(gon.one_factor)
            insert_stats(globalMap, borough_layer, gon.feature_groups['wards']);
        else
            insert_two_factor_stats(globalMap, ward_layer, gon.feature_groups['wards'], gon.relation_list);
        console.log(ward_layer);
    });

    //Set up scroll level controls
    setup_controls(globalMap, ward_layer);

    if(gon.hide_wards)
        globalMap.events.register("zoomend", globalMap, zoom_level_changed);

    //This is a hack, and I don't like it, but whatever
    //It's necessary because OpenLayers flatly refuses to load into a % width div
    $('.street_map .map-container').css('height', $(window).height() * 0.8);
    globalMap.updateSize();
}

function zoom_level_changed()
{
    zoom = globalMap.getZoom();
    console.log(zoom);
    if(zoom <= 12)
    {
        globalLayers['ward_layer'].setVisibility(false);
    }
    else
    {
        globalLayers['ward_layer'].setVisibility(true);
    }
}

//Resizes the map after a short delay.
window.onresize = function()
{
 setTimeout( 
  	function() { 
      	$('.street_map .map-container').css('height', $(window).height() * 0.8);
        globalMap.updateSize();
  	}, 
    200);
}