//Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/
var base_url_regions = "/assets/";
var width = 600,
    height = 400;
$(document).ready(function() {
	stats = Array();
	stats['boroughs'] = gon.feature_groups['boroughs'];
	console.log(stats);
	if(gon.street_map)
		setup_map(stats);
	
})

function one_factor_change(element, url)
{
	window.location(url + "?factor=" + element.value);
}

function plot_data(stats)
{
	var svg = d3.select('#map').select('g');

	//We don't really want more than 10 groups on the map because it's really hard
	//to visualise more. We prep the data by reassigning ranks
	if(stats['boroughs'].length > 0)
	{
		var ranking_factor = parseInt(stats['boroughs'][0]['primary_factor']);
		var boros = stats['boroughs'];
		var rank_name = Object.keys(boros[0]['factors'])[ranking_factor];
		
		for(var i = 1; i < boros.length; i++)
		{	
			var diff = parseFloat(boros[i]['factors'][rank_name]) - parseFloat(boros[i-1]['factors'][rank_name]);
			console.log(diff);
		}	

		//Now label it up
		for(var i = 0; i < stats['boroughs'].length; i++)
		{
			var loc_id = stats['boroughs'][i]['locations'];
			var curr_rank = stats['boroughs'][i]['adj_rank'];
			for(var j = 0; j < loc_id.length; j++)
			{
				svg.select('[boro-id="' + loc_id[j] + '"]').classed("rank-" + curr_rank, true);
			}
		}
	}
}

function setup_map(stats)
{

	var path = d3.geo.path()
				.projection(null);

	var svg = d3.select("#map");

	d3.json(base_url_regions + "london_topo.json", function(error, london) {
		console.log(london);
		//var subunits = 
		console.log(london.objects);

		var features = svg.append("g");

		var boroughs = topojson.feature(london, london.objects.londonTrimmed);
		var wards = topojson.feature(london, london.objects.londonWardsTrimmed);
		console.log(boroughs);

		var zoom = d3.behavior.zoom()
					.translate([0, 0])
					.scale(1)
					.scaleExtent([1, 8])
					.on("zoom", zoomed);

		var projection = d3.geo.albers()
							.center([-0.25, 51.56])
							.rotate([0.0, 0])
							.parallels([50, 60])
							.scale(75000)
							.translate([width / 2, height / 2]);


		var path = d3.geo.path()
					.projection(projection);

		features.append("path")
				.datum(boroughs)
				.attr("d", path);

		console.log(features.selectAll(".boroughs"));

		//Set up borough IDs for easy colouring
		features.selectAll(".boroughs")
				.data(topojson.feature(london, london.objects.londonTrimmed).features)
				.enter().append("path")
				.attr("boro-id", function(d){
					return d['id'];
				})
				.attr("d", path);

		//Append text to the boroughs, needs fixing
		features.selectAll("text")
		    .data(topojson.feature(london, london.objects.londonTrimmed).features)
		    .enter()
		    .append("svg:text")
		    .text(function(d){
		        return d['properties']['NAME'];
		    })
		    .attr("x", function(d){
		        return path.centroid(d)[0];
		    })
		    .attr("y", function(d){
		        return  path.centroid(d)[1];
		    })
		    .attr("text-anchor","middle")
		    .attr('font-size','4pt');


		svg.append("rect")
			.attr("class", "overlay")
			.attr("width", width)
			.attr("height", height)
			.call(zoom);

		plot_data(stats);
		function zoomed() {
			features.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
		}
	});

	d3.select(self.frameElement).style("height", height + "px");
}
//Resizes the map after a short delay.
window.onresize = function()
{
 setTimeout( 
  	function() { 
      	$('.street_map .map-container').css('height', $(window).height() * 0.8);

  	}, 
    200);
}

